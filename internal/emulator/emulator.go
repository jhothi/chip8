package emulator

import (
	"io/ioutil"
	"fmt"
)

var fontSet = [80]byte{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

type emulator struct {
	cpu    *cpu
	io     *io
	memory [4096]byte
}

func New() emulator {
	cpu := newCpu()
	io := newIo()
	e := emulator{cpu: &cpu, io: &io}
	copy(e.memory[:], fontSet[:])
	return e
}

func (e *emulator) Start(romPath string) {
	e.loadRom(romPath)
	fmt.Println(e.memory[512:])
	for !e.io.window.Closed() {
		e.cpu.emulate(e.memory[:], e.io)
		e.io.readKeyPress()
		e.io.window.Update()
	}
}

func (e *emulator) loadRom(romPath string) [4096]byte {
	data, _ := ioutil.ReadFile(romPath)
	for i, v := range data {
		e.memory[i+512] = v
	}
	return e.memory
}


